import pandas as pd
import numpy
import numpy as np
import matplotlib.pyplot as plt 
import datetime

df = pd.read_excel('C:/Users/admin/Desktop/data_science/Исходящие вызовы абонента.xlsx') #Открываем файл, в гугл колабсе путь до файла будет отличаться немного
df = df.drop_duplicates() #Убираем дубликаты 
df['Дата звонка'] = pd.to_datetime(df['Дата звонка'], dayfirst = True) #преобразовываем дату звонка, ставим день первым (за это отвечает параметр dayfirst = True)
df['Дата_День'] = df['Дата звонка'].dt.to_period('D') #Преобразуем дату звонка, выбираем по дням
df['Дата_М'] = df['Дата звонка'].dt.to_period('M') #Преобразуем дату звонка, выбираем по месяцам
df['Длительность разговора в минутах'] = np.ceil((pd.to_timedelta(df['Длительность разговора']).dt.total_seconds().astype(int))/60).astype(int) #Преобразуем столбец длительность разговора, переводим все в минуты и округляем в большую сторону. Если звонок был 1 минута 49 секунд, получим 2 минуты

df['Стоимость минут/Монстр общения'] = df['Длительность разговора в минутах'].apply(lambda x: x* 1.5 if x == 1 else (x-1) * 0.5 + 1.5 if 2 <= x <= 9 else 1.5 + 0.5 * 8 + 1 * (x - 9))#С помощью лямба функции считаем затраты по тарифу Монстр общения
df['Стоимость минут/33 копейки'] = df['Длительность разговора в минутах'].apply(lambda x: x * 1 if x == 1 else (x - 1) * 0.33 + 1) #С помощью лямба функции считаем затраты по тарифу 33 копейки

res = pd.DataFrame() #Создаем еще один пустой датафрейм, будем его заполнять

res['Звонки в день'] = df.groupby(['Дата_М','Дата_День']).count()['Дата звонка'] #Группируем заголовки из предыдущего датафрейма(df) в один заголовок Звонки в день. count считает кол-во не пустых строчек
res['Минут в день'] = df.groupby(['Дата_М','Дата_День']).sum()['Длительность разговора в минутах']#то же самое, что строка выше, только группируем минуты в день. sum( ) считает кол-во минут
res['Монстр общения/Стоимость в день'] = df.groupby(['Дата_М','Дата_День']).sum()['Стоимость минут/Монстр общения'] #Тоже самое что сверху, группируем из предыдущего датафрейма
res['33 копейки/Стоимость в день'] = df.groupby(['Дата_М','Дата_День']).sum()['Стоимость минут/33 копейки']# аналогично здесь
res['Хочу сказать/Стоимость в день'] = res['Минут в день'].apply(lambda x: x * 3.95 if x <= 5 else (x - 5) * 0.4 + 5 * 3.95) #С помощью лямба функции считаем затраты по тарифу Хочу сказать
mask = df['Оператор связи вызываемого абонента'] != 'мтс' #Создаем маску
res ['Минут в день/МТС'] = df[mask].groupby(['Дата_М','Дата_День']).sum()['Длительность разговора в минутах'] # Группируем из предыдущего датафрейма отдельно для МТС
res ['Много звонков/Стоимость в день'] = res['Минут в день/МТС'].apply(lambda x: x * 0.9 if x <= 5 else (x - 30) * 0.9 + 4.5 + 25 * 0.05 if x > 30 else (x - 5) * 0.05 + 4.5) #С помощью лямба функции считаем затраты по тарифу Много звонков


res1 = pd.DataFrame() #Создаем финальный датафрейм, в котором отобразим результирующие затраты за пол года по каждому тарифу
res1['Звонки'] = df.groupby('Дата_М').count()['Дата звонка']# Группируем из самого первого датафрейма
res1['Минут в месяц'] = res.groupby('Дата_М').sum()['Минут в день']#Группируем из второго датафрейма
res1['Монстр общения'] = res.groupby('Дата_М').sum()['Монстр общения/Стоимость в день']#Группируем из второго датафрейма
res1['33 копейки'] = res.groupby('Дата_М').sum()['33 копейки/Стоимость в день']#Группируем из второго датафрейма
res1['Хочу сказать'] = res.groupby('Дата_М').sum()['Хочу сказать/Стоимость в день']#Группируем из второго датафрейма
res1['Много звонков'] = res.groupby('Дата_М').sum()['Много звонков/Стоимость в день']#Группируем из второго датафрейма
res1['Больше слов'] = res1['Минут в месяц'].apply(lambda x: (x - 555) * 1.95 + 555 if x > 555 else 555) #С помощью лямба функции считаем затраты по тарифу для МТС
res1.loc['Итого'] = [res1['Звонки'].sum(),res1['Минут в месяц'].sum(),res1['Монстр общения'].sum(),res1['33 копейки'].sum(),res1['Хочу сказать'].sum(),res1['Много звонков'].sum(),res1['Больше слов'].sum()] #Согдаем итоговый столбец, в котором все подсчитываем

x = res1.loc['Итого'].to_list()[2:7] #Для графика, берем получившиеся значения из последнего датафрейма

labels = ['Монстр общения','33 копейки','Больше слов','Хочу сказать','Много звонков'] #объявляем заголовки
plt.figure(figsize=(14,7),dpi = 60) #мы создали область Figure (экземпляр класса figure). figsize(float, float): эти параметры представляют собой ширину, высоту в дюймах. dpi : этот параметр является разрешением рисунка.
plt.title('Затраты на связь в зависимости от тарифа',color = 'black', weight = 'bold', family = 'sans-serif', size = 22)#Задали заголовок
plt.xlabel('Тариф',color = 'black', weight = 'bold', family = 'sans-serif', fontsize = 14) #Заголовок по оси Х
plt.ylabel('Стоимость,руб',color = 'black', weight = 'bold', family = 'sans-serif', fontsize = 14)#Заголовок по оси Y
plt.rc('xtick',color = 'red', labelsize = 18) #это можно удалить, это не важно
plt.grid(alpha = .4) #задаем сетку при отображении фигруы
for i in range(len(x)):
    plt.bar(labels[i],x[i]) #Непосредственно здесь мы создаем наш график, сопоставляем значения из массива x (там лежат цифры по затратам) и из массива labels(Тут у нас названия тарифов)

plt.xticks(rotation = 20) #Это можно удалить, не важная штука
plt.show() #отображаем в окне наш график

